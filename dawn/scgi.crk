## SCGI handler, derived from httpsrv.crk
##
## Copyright 2012 Google Inc.
## Copyright 2012 Shannon Weyrick <weyrick@mozek.us>
## Copyright 2012 Conrad Steenberg <conrad.steenberg@gmail.com>
## 
##   This Source Code Form is subject to the terms of the Mozilla Public
##   License, v. 2.0. If a copy of the MPL was not distributed with this
##   file, You can obtain one at http://mozilla.org/MPL/2.0/.
## 

import crack.lang AppendBuffer, Buffer, ManagedBuffer, WriteBuffer, Formatter,
                  Exception;
import crack.ascii strip, escape;
import crack.cont.array Array;
import crack.cont.hashmap HashMap, OrderedHashMap;
import crack.cont.list List;
import crack.functor Functor1;
import crack.io cerr, StandardFormatter, StringFormatter, Writer, FileHandle,
                      FStr;
import crack.lang SystemError, InvalidStateError;
import crack.logger DEBUG, INFO, WARN, ERROR, FATAL, Logger, LogFormatter;
import crack.net InetAddress, UnixAddress, Poller, Socket, AF_UNIX, POLLIN,
                 POLLOUT, POLLERR, SOCK_STREAM;;
import crack.runtime errno, fileExists, fileRemove, EAGAIN, EWOULDBLOCK;
import crack.strutil StringArray;
import crack.sys strerror;
import crack.time TimeDelta;

@import crack.ann define, interface, implements;

StandardFormatter NULL_FORMATTER = null;
sfmt := FStr();
uint bufSize = 16384;

## Contains the full contents of an SCGIrequest and provides the means for 
## communicating back to the client.
class SCGIRequest {
    Buffer method, path, data, _indata; // latter is so we keep a reference
    OrderedHashMap[Buffer, Buffer] inHeaders, outHeaders = {},
                                   inCookies, outCookies = {};
    UnixAddress clientAddr;
    StandardFormatter __clt;
    Logger logger;

    bool _headersSent = false, _replySent = false;
    bool doneProcessing;

    oper init(Writer client, ## the channel to write back to the client.
              UnixAddress clientAddr, ## the client address.
              OrderedHashMap[Buffer, Buffer] headers,
              OrderedHashMap[Buffer, Buffer] cookies,
              Logger logger,
              Buffer indata,
              uint pos
              ) :
                clientAddr = clientAddr,
                __clt(client),
                inHeaders = headers,
                inCookies = cookies,
                doneProcessing = false,
                logger = logger,
                _indata = indata
    {
        method = headers["REQUEST_METHOD"];
        path = headers["SCRIPT_URL"];
        logger.debug(FStr() `pos=$pos, _indata.size=$(_indata.size)`);
        byteptr buf = _indata.buffer + pos;
        data = Buffer(buf, _indata.size - pos);
    }

    bool headersSent() {
        return _headersSent;
    }

    bool replySent() {
        return _replySent;
    }

    bool isGet() {
        return method == "GET";
    }

    bool isPost() {
        return method == "POST";
    }

    // Set header value. Return true if an old value was overwritten
    bool setHeader(String key, String value) {
        retval := (outHeaders.get(key, null) is null) ? false : true;
        outHeaders[key] = value;
        return retval;
    }

    AppendBuffer _encodeCookies() {
        AppendBuffer ck = {bufSize};
        uint i=0;
        for (elem :in outCookies) {
            if (i>0) ck.extend(" ");
            ck.extend(elem.key);
            ck.extend("=");
            ck.extend(elem.val);
            ck.extend(";");
            i+=1;
        }
        return ck;
    }

    uint sendHeaders() {
        if (_headersSent)
            throw InvalidStateError("Attemping to resend HTTP headers");
        cookieLine := _encodeCookies();
        if (cookieLine.size > 0)
            outHeaders["Cookies"] = cookieLine;
        for (item :in outHeaders)
            __clt `$(item.key): $(item.val)\r\n`;
        _headersSent = true;
        return outHeaders.count();
    }
    
    ## Sends a reply to the client with the specified code, content type and 
    ## contents.
    void sendReply(int code, Buffer contentType, Buffer contents) {
        if (_replySent)
            throw InvalidStateError("Attemping to resend HTTP response");

        __clt I`HTTP/1.1 $code OK\r\n`;
        logger.debug(FStr() `Sending headers $outHeaders`);
        sendHeaders();
        __clt `Content-type: $contentType\r\n`;
        __clt `Content-length: $(contents.size)\r\n\r\n$contents`;
        logger.debug(String(contents));
    }
    
    void sendRedirect(int code, String location) {
        __clt I`HTTP/1.1 $code OK\r\nLocation: $location\r\n\r\n`;
    }

    void formatTo(Formatter fmt) {
        fmt `SCGIrequest($__clt, $clientAddr: $method $path)`;
    }
}

uintz normalizeIndex(intz index, uintz size) {
    if (index < 0)
        index = size + index;
    
    # if it's still zero, trim to zero
    if (index < 0)
        index = 0;
    
    # if greater than the limit, trim to the limit.
    else if (index > size)
        index = size;
    
    return index;
}

## Joins an array of path components into a path.
String joinPath(StringArray path, int start, int end) {
    size := path.count();
    s := normalizeIndex(start, size);
    e := normalizeIndex(end, size);

    # figure out how much space we need for all strings separated by slashes.
    uintz bufSize;
    for (elem :in path)
        bufSize += elem.size;
    bufSize += size - 1;

    AppendBuffer buf = {bufSize};
    for (int i = start; i < end; ++i) {
        if (i == start)
            buf.append(b'/');
        buf.extend(path[i]);
    }
    
    return String(buf, true);
}

const int _ST_REQUEST = 0;
const int _ST_HEADERS= 1;
const int _ST_BODY = 2;

## Error formatter.  Writes a message to cerr (TODO: to a logger) and sends an 
## error reply with the message as its parcel.
class Error : StringFormatter {
    SCGIRequest req;
    int code;

    oper init(SCGIRequest req, int code) : req = req, code = code {}

    void leave() {
        result := createString();
        req.sendReply(code, "text/plain", result);
    }
}

## Request handler interface.  This interface dispatches a handler to 
## interface methods corresponding to the HTTP GET, PUT and POST methods.
@abstract class SCGIRequestHandler {
    @abstract bool onGet(SCGIRequest req);
    @abstract bool onPut(SCGIRequest req);
    @abstract bool onPost(SCGIRequest req);
    @abstract bool oper call(SCGIRequest req);
}

alias HandlerArray = Array[SCGIRequestHandler];

class OutQueue : List[String] @implements Writer {
    void write(Buffer data) {
        if (data.isa(String))
            append(String.cast(data));
        else
            append(String(data));
    }
    void write(byteptr data) {
        append(String(data));
    }
}

## An SCGI socket 'server'
##
class SCGIServer {
    LogFormatter _debug, _error, _warn, _info;
    
    class Client {
        ManagedBuffer inbuf = {bufSize};
        SCGIServer server;
        SCGIRequest request;
        HandlerArray handlers;
        Socket sock;
        UnixAddress addr;
        int state;
        Logger _logger;
        
        OutQueue outQueue = {};
                
        ## the index of the first byte in the buffer that has been read but 
        ## not processed.
        uint pos;
        
        oper init(Socket sock, UnixAddress addr, HandlerArray handlers,
                  Logger logger) :
            sock = sock, 
            addr = addr,
            handlers = handlers,
            _logger = logger,
            pos = 0 {
            sock.setNonBlocking(true);
        }

        void formatTo(Formatter fmt) {
            fmt `Client: $sock, $addr `;
        }

        uint parseSCGIHeaders(Buffer data) {
            uint si = 0, len = 0;
            headers := OrderedHashMap[Buffer, Buffer]();
            cookies := OrderedHashMap[Buffer, Buffer]();
            buf := data.buffer;
            _logger.debug(String(data));

            # parse length
            for (si = 0; si < data.size && buf[si] != b':'; si++) {
                if (buf[si] >= 0x30 && buf[si] <= 0x39)
                    len = (len*10) + (buf[si]-0x30);
                else
                    throw Exception(sfmt `Invalid character $(escape(Buffer(buf+si,1))) at offset $si`);
            }

            if (buf[si] != b":")
                throw Exception(sfmt `Invalid header, expected : but got $(escape(Buffer(buf+si,1))) at offset $si`);

            si++;
            
            while (si < data.size) {
                # parse key
                uint i;
                for (i=si; i < data.size && buf[i] > 0; i++) { }
                key := String(Buffer(buf+si, i-si));
                if (buf[i] != 0)
                    throw Exception(sfmt `Malformed header at position $i while parsing key $key`);
                si = i+1;

                # parse value
                for (i=si; i < data.size && buf[i] > 0; i++) { }
                value := String(Buffer(buf + si, i - si));
                if (buf[i] != 0)
                    throw Exception(sfmt `Malformed header at position $i while parsing value $key`);

                si = i+1;
                headers[key] = value;
                _logger.debug(sfmt `$key: $value`);
                if (buf[si] == b",") break;
            }

            if (buf[si] != b",")
                throw Exception(sfmt `Malformed netstring at position $si while parsing netstring`);

            request = SCGIRequest(sock, addr, headers, cookies, _logger, data,
                                  si+1);

            # Iterate through request handlers
            for (handler :in handlers) {
                if (handler(request)) {
                    request.doneProcessing = true;
                    break;
                }
            }

            if (!request.doneProcessing) {
                request.sendReply(200, "text/plain", sfmt `$headers`);
                _logger.debug(sfmt `sent reply to $sock`);
                request.doneProcessing = true;
            }

            return si;
        }

        ## Returns a byteptr to the current input buffer read position.
        @final byteptr getInputBuf() {
            if (inbuf.cap - inbuf.size < bufSize)
                # since the start size is bufSize, we can assume that we will 
                # grow to accomodate a bufSize byte buffer.
                inbuf.grow(inbuf.cap * 2);
            return inbuf.buffer + pos;
        }

        @final void __badRequest() {
            _logger.error(sfmt `Invalid request from $(this)`);
        }        

        @final bool processInput() {
            int amtRead = 1;
            WriteBuffer writeBuf;
            while (amtRead > 0) { // Just read all data for now
                writeBuf = WriteBuffer(getInputBuf(), 0, inbuf.cap - pos);
                amtRead = sock.read(writeBuf);
                _logger.debug(sfmt `amtRead = $amtRead`);
                if (amtRead == 0) {
                    if (errno() == EWOULDBLOCK)
                        _logger.debug("Got EWOULDBLOCK");
                    else if (errno() == EAGAIN)
                        _logger.debug("Got EAGAIN");
                }

                pos += amtRead;
                if (amtRead > writeBuf.cap) {
                    _logger.debug(sfmt `buffer capacity reached`);
                    break;
                }
            }
            _logger.debug(sfmt `pos=$pos, sock =$sock\n`);
            if (!pos) {
                _logger.warn(sfmt `client.processInput END: empty request!!`);
                return false;
            } else {
                inbuf.size = pos;
                parseSCGIHeaders(inbuf);
                return true;
            }
        }

    } # end of Client

    int __port;
    Socket __sock = {AF_UNIX, SOCK_STREAM, 0};
    HashMap[FileHandle, Client] __clients = {};
    Poller __poller = {};
    List[FileHandle] __toRemove = {};
    HandlerArray __handlers = {};
    Logger _logger;
    uint _logLevel = ERROR;

    oper init(Buffer path) {
        if (fileExists(path.buffer))
            fileRemove(path.buffer);

        _logger = Logger(cerr, _logLevel);

        _debug = LogFormatter(_logger, DEBUG); # All these messages are at DEBUG level
        _info = LogFormatter(_logger, INFO);
        _error = LogFormatter(_logger, ERROR);


        if (!__sock.bind(UnixAddress(path))) 
            throw SystemError('bind failed', errno());
        if (!__sock.listen(5)) 
            throw SystemError('listen failed', errno());
        if (!__sock.setReuseAddr(true))
            _info `WARN: reuseaddr failed: $(strerror())`;
        __poller.add(__sock, POLLIN);
    }

    Logger logger() {
        return _logger;
    }

    void __accept() {
        clientAccepted := __sock.accept();
        _debug I`  got connection from $(clientAccepted.addr) with ref count 
                  $(clientAccepted.sock.refCount) on $(clientAccepted.sock.fd)`;
        __poller.add(clientAccepted.sock, POLLIN);
        __clients[clientAccepted.sock] =
            Client(clientAccepted.sock,
                   UnixAddress.cast(clientAccepted.addr),
                   __handlers, _logger);
        _logger.debug(sfmt `clients=$__clients`);
    }
    
    void __processClientRead(FileHandle p) {
        client := __clients[p];
        if (!client.processInput())
            __toRemove.append(p);
    }
    
    void __processClientWrite(FileHandle p) {
        # find the client
        client := __clients[p];
        if (client && client.request.doneProcessing) {
          client.sock.close();
          __toRemove.append(client.sock);
          _logger.debug(sfmt `toremove=$__toRemove`);
        }
    }

    ## Adds the given handler to the chain.  Handlers are called in the order 
    ## in which they were added until one of them returns true.
    void addHandler(SCGIRequestHandler handler) {
        __handlers.append(handler);
    }
    
    ## Process a single event.
    ## If 'timeout' is not null, it is the timeout to wait for the next event.
    void processOnce(TimeDelta timeout) {
        # go through the clients, change their events
        for (clientItem :in __clients)
            if (clientItem.val.outQueue)
                __poller.setEvents(clientItem.val.sock, POLLIN | POLLOUT);
            else
                __poller.setEvents(clientItem.val.sock, POLLIN);
        
        result := __poller.wait(timeout);
        while (evt := __poller.nx()) {
            _debug `  event is on $(evt.pollable)`;
            # if it's the server socket, do an accept
            if (evt.pollable is __sock) {
                _debug `  got new connection`;
                __accept();
            # client events
            } else {
                if (POLLIN & evt.revents) {
                    _debug `  got client read`;
                    __processClientRead(evt.pollable);
                    __processClientWrite(evt.pollable);
                } else if (POLLOUT & evt.revents) {
                    _debug `  got client writable`;
                    __processClientWrite(evt.pollable);
                } else if (POLLERR & evt.revents) {
                    _error `  error on socket $(evt.pollable)`;
                } else {
                    _error I`  wtf???  pollable = $(evt.pollable), events = 
                              $(evt.events), revents = $(evt.revents)`;
                }
            }
        }
        
        # remove pollables that we're done with.
        while (__toRemove) {
            p := __toRemove.popHead();
            _debug `removing $p`;
            __poller.remove(p);
            __clients.delete(p);
            p.close();
        }
    }
    
    void run() {
        delay := TimeDelta(2,0); // wait 2 secs between iterations if no events
        while (true) {
            processOnce(delay);
        }
    }
    
    int getPort() { return __port; }
}

