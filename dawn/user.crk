// Serializable/Materializable base class autogenerated by CrackClassGenerator
// 2013-05-30 16:00:22 DST

import crack.lang InvalidArgumentError, Buffer;
import crack.ascii radix;
import crack.cont.array Array;
import crack.io FStr;
import crack.runtime INT_SIZE;
import whip.serializer Serializer, Materializer, Serializable;
import crack.regex escape, Regex, Match;

FStr sfmt = {};

//------------------------------------------------------------------------------
class Phone : Serializable {
  uint32 __id = 0x8e007a44;
  uint32 getId() { return __id; }
  String where = "";
  String number = "";
  oper init() { }


  void serialize(Serializer sr, Buffer name) {
    uint i = 0;
    sr.prefix(name);
    sr.format(where, "where");
    sr.format(number, "number");
    sr.postfix(name);
  }

  void serialize(Serializer sr) {
    serialize(sr, null);
  }

  uint sizeNeeded() {
    uint cnt = 4;  // The 32bit id is always there
    cnt += where.size + (4 - (where.size)%4); // where
    cnt += number.size + (4 - (number.size)%4); // number
    return cnt;
  }

  void materialize(Materializer mt, Buffer name) {
    mt.prefix(name);
    where = mt.format(where, "where");
    number = mt.format(number, "number");
    mt.postfix(name);
  }

  void materialize(Materializer mt) {
    materialize(mt, null);
  }

  oper init(Materializer mt, Buffer name) {
     materialize(mt, name);
  }

  oper init(Materializer mt) {
     materialize(mt, null);
  }
}

//------------------------------------------------------------------------------
class Address : Serializable {
  uint32 __id = 0xd2f828a1;
  uint32 getId() { return __id; }
  String first = "";
  String last = "";
  Array[String] street = {};
  String zip = "";
  String country = "";
  oper init() { }


  void serialize(Serializer sr, Buffer name) {
    uint i = 0;
    sr.prefix(name);
    sr.format(first, "first");
    sr.format(last, "last");
    sr.format(street, "street");
    sr.format(zip, "zip");
    sr.format(country, "country");
    sr.postfix(name);
  }

  void serialize(Serializer sr) {
    serialize(sr, null);
  }

  uint sizeNeeded() {
    uint cnt = 4;  // The 32bit id is always there
    cnt += first.size + (4 - (first.size)%4); // first
    cnt += last.size + (4 - (last.size)%4); // last
    cnt += street.count() + (4 - (street.count())%4); // street
    cnt += zip.size + (4 - (zip.size)%4); // zip
    cnt += country.size + (4 - (country.size)%4); // country
    return cnt;
  }

  void materialize(Materializer mt, Buffer name) {
    mt.prefix(name);
    first = mt.format(first, "first");
    last = mt.format(last, "last");
    street = mt.format(street, "street");
    zip = mt.format(zip, "zip");
    country = mt.format(country, "country");
    mt.postfix(name);
  }

  void materialize(Materializer mt) {
    materialize(mt, null);
  }

  oper init(Materializer mt, Buffer name) {
     materialize(mt, name);
  }

  oper init(Materializer mt) {
     materialize(mt, null);
  }
}

//------------------------------------------------------------------------------
class Session : Serializable {
  uint32 __id = 0x1c140658;
  uint32 getId() { return __id; }
  String ip = "";
  String type = "";
  String cookie = "";
  oper init() { }


  void serialize(Serializer sr, Buffer name) {
    uint i = 0;
    sr.prefix(name);
    sr.format(ip, "ip");
    sr.format(type, "type");
    sr.format(cookie, "cookie");
    sr.postfix(name);
  }

  void serialize(Serializer sr) {
    serialize(sr, null);
  }

  uint sizeNeeded() {
    uint cnt = 4;  // The 32bit id is always there
    cnt += ip.size + (4 - (ip.size)%4); // ip
    cnt += type.size + (4 - (type.size)%4); // type
    cnt += cookie.size + (4 - (cookie.size)%4); // cookie
    return cnt;
  }

  void materialize(Materializer mt, Buffer name) {
    mt.prefix(name);
    ip = mt.format(ip, "ip");
    type = mt.format(type, "type");
    cookie = mt.format(cookie, "cookie");
    mt.postfix(name);
  }

  void materialize(Materializer mt) {
    materialize(mt, null);
  }

  oper init(Materializer mt, Buffer name) {
     materialize(mt, name);
  }

  oper init(Materializer mt) {
     materialize(mt, null);
  }
}

//------------------------------------------------------------------------------
class User : Serializable {
  uint32 __id = 0xe90fdcf9;
  uint32 getId() { return __id; }
  String __uuid = "";
  String short = "";
  String first = "";
  String last = "";
  Array[Address] adresses = {};
  Array[Phone] phones = {};
  Array[Session] sessions = {};
  String password = "";
  String nonce = "";
  uint hashtype = 0;
  oper init() { }


  void serialize(Serializer sr, Buffer name) {
    uint i = 0;
    sr.prefix(name);
    sr.format(__uuid, "__uuid");
    sr.format(short, "short");
    sr.format(first, "first");
    sr.format(last, "last");
    if (true) {
      asr := sr.startArray(adresses.count(), "adresses");
      i = 0;
      for (el :in adresses) {
        asr.appendItem(el, i++);
      }
      sr.endArray(asr, "adresses");
    }
    if (true) {
      asr := sr.startArray(phones.count(), "phones");
      i = 0;
      for (el :in phones) {
        asr.appendItem(el, i++);
      }
      sr.endArray(asr, "phones");
    }
    if (true) {
      asr := sr.startArray(sessions.count(), "sessions");
      i = 0;
      for (el :in sessions) {
        asr.appendItem(el, i++);
      }
      sr.endArray(asr, "sessions");
    }
    sr.format(password, "password");
    sr.format(nonce, "nonce");
    sr.format(hashtype, "hashtype");
    sr.postfix(name);
  }

  void serialize(Serializer sr) {
    serialize(sr, null);
  }

  uint sizeNeeded() {
    uint cnt = 4;  // The 32bit id is always there
    cnt += __uuid.size + (4 - (__uuid.size)%4); // __uuid
    cnt += short.size + (4 - (short.size)%4); // short
    cnt += first.size + (4 - (first.size)%4); // first
    cnt += last.size + (4 - (last.size)%4); // last
    for (el :in adresses) { // adresses
      cnt += el.sizeNeeded();
    }
    for (el :in phones) { // phones
      cnt += el.sizeNeeded();
    }
    for (el :in sessions) { // sessions
      cnt += el.sizeNeeded();
    }
    cnt += password.size + (4 - (password.size)%4); // password
    cnt += nonce.size + (4 - (nonce.size)%4); // nonce
    cnt += INT_SIZE; // hashtype
    return cnt;
  }

  void materialize(Materializer mt, Buffer name) {
    mt.prefix(name);
    __uuid = mt.format(__uuid, "__uuid");
    short = mt.format(short, "short");
    first = mt.format(first, "first");
    last = mt.format(last, "last");
    if (true) {
      adresses.clear();
      it := mt.iter("adresses");
      while (it.next()) {
        adresses.append(Address(it.elem(), null));
      }
    }
    if (true) {
      phones.clear();
      it := mt.iter("phones");
      while (it.next()) {
        phones.append(Phone(it.elem(), null));
      }
    }
    if (true) {
      sessions.clear();
      it := mt.iter("sessions");
      while (it.next()) {
        sessions.append(Session(it.elem(), null));
      }
    }
    password = mt.format(password, "password");
    nonce = mt.format(nonce, "nonce");
    hashtype = mt.format(hashtype, "hashtype");
    mt.postfix(name);
  }

  void materialize(Materializer mt) {
    materialize(mt, null);
  }

  oper init(Materializer mt, Buffer name) {
     materialize(mt, name);
  }

  oper init(Materializer mt) {
     materialize(mt, null);
  }
}

