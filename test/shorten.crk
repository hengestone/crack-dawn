// Serializable/Materializable base class autogenerated by CrackClassGenerator
// 2013-07-01 13:21:00 DST

import crack.lang InvalidArgumentError, Buffer;
import crack.ascii radix;
import crack.cont.array Array;
import crack.io FStr;
import crack.runtime INT_SIZE;
import whip.serializer Serializer, Materializer, Serializable;
import crack.db.mongo_support Oid;
FStr sfmt = {};

//------------------------------------------------------------------------------
class ShortUrl : Serializable {
  uint32 __id = 0xc6f03f9;
  uint32 getId() { return __id; }
  Oid _id;
  String url = "";
  String short = "";
  oper init() { }

  void set_id(Oid new_id) { _id = new_id }
  Oid get_id() { return _id }


  void serialize(Serializer __sr, Buffer __name) {
    uint i = 0;
    __sr.prefix(__name);
    __sr.format(_id, "_id");
    __sr.format(url, "url");
    __sr.format(short, "short");
    __sr.postfix(__name);
  }

  void serialize(Serializer __sr) {
    serialize(__sr, null);
  }

  uint sizeNeeded() {
    uint cnt = 4;  // The 32bit id is always there
    cnt += 12; // _id
    cnt += url.size + (4 - (url.size)%4); // url
    cnt += short.size + (4 - (short.size)%4); // short
    return cnt;
  }

  void materialize(Materializer __mt, Buffer __name) {
    __mt.prefix(__name);
    _id = __mt.format(_id, "_id");
    url = __mt.format(url, "url");
    short = __mt.format(short, "short");
    __mt.postfix(__name);
  }

  void materialize(Materializer __mt) {
    materialize(__mt, null);
  }

  oper init(Materializer __mt, Buffer __name) {
     materialize(__mt, __name);
  }

  oper init(Materializer __mt) {
     materialize(__mt, null);
  }
}

